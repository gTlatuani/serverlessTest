# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: serverlessprueba

plugins:
    - serverless-appsync-plugin

frameworkVersion: '2 || 3'

provider:
  name: aws
  runtime: nodejs14.x
  #stage: dev
  region: us-east-1
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, env:stage, 'dev'}

  iamRoleStatements:
      - Effect: Allow
        Action:
            - dynamodb:*
        Resource:
            - arn:aws:dynamodb:us-east-1:731260036662:table/Students
            - arn:aws:dynamodb:us-east-1:731260036662:table/Books
            - arn:aws:dynamodb:us-east-1:731260036662:table/Groups
            - arn:aws:dynamodb:us-east-1:731260036662:table/Lessons


custom:
  appSync: # appsync plugin configuration

    name: ${self:service}-appsync-${self:provider.stage}
    authenticationType: API_KEY # since we dont have user login for now
    mappingTemplates:
      - type: Query
        field: getBooks
        dataSource: getBooks
        request: false
        response: false

      - type: Query
        field: getGroups
        dataSource: getGroups
        request: false
        response: false

      - type: Query
        field: getStudents
        dataSource: getStudents
        request: false
        response: false

      - type: Mutation
        field: addBook
        dataSource: addBook
        request: false
        response: false

      - type: Mutation
        field: addStudent
        dataSource: addStudent
        request: false
        response: false

      - type: Mutation
        field: addGroup
        dataSource: addGroup
        request: false
        response: false

      - type: Mutation
        field: registerStudentAtGroup
        dataSource: registerStudentAtGroup
        request: false
        response: false

      - type: Mutation
        field: initLesson
        dataSource: initLesson
        request: false
        response: false

    dataSources:
      - type: AWS_LAMBDA
        name: getBooks
        config:
          functionName: getBooks
      - type: AWS_LAMBDA
        name: getGroups
        config:
          functionName: getGroups

      - type: AWS_LAMBDA
        name: addBook
        config:
          functionName: addBook

      - type: AWS_LAMBDA
        name: getStudents
        config:
            functionName: getStudents

      - type: AWS_LAMBDA
        name: addStudent
        config:
          functionName: addStudent
      - type: AWS_LAMBDA
        name: addGroup
        config:
          functionName: addGroup
      - type: AWS_LAMBDA
        name: registerStudentAtGroup
        config:
            functionName: registerStudentAtGroup
      - type: AWS_LAMBDA
        name: initLesson
        config:
            functionName: initLesson

# you can overwrite defaults here
#  stage: dev

# you can define service wide environment variables here
#  environment:
#    variable1: value1


functions:

  # hello:
  #   handler: functions/example.hello
  #   events:
  #       - httpApi:
  #           path: /hello
  #           method: get

  getStudents:
    handler: functions/getStudents.handler
    environment:
        STUDENTS_TABLE: !Ref Students

  addStudent:
    handler: functions/addStudent.handler
    environment:
        STUDENTS_TABLE: !Ref Students
    # events:
    #     - httpApi:
    #         path: /students/add
    #         method: post

  getBooks:
      handler: functions/getBooks.getBooks
      environment:
          BOOKS_TABLE: !Ref Books
  getGroups:
      handler: functions/getGroups.handler
      environment:
          GROUPS_TABLE: !Ref Groups

  addBook:
      handler: functions/addBook.handler
      environment:
          BOOKS_TABLE: !Ref Books
  addGroup:
      handler: functions/addGroup.handler
      environment:
          GROUPS_TABLE: !Ref Groups
  registerStudentAtGroup:
      handler: functions/registerStudentAtGroup.handler
      environment:
          GROUPS_TABLE: !Ref Groups
  initLesson:
      handler: functions/initLesson.handler
      environment:
          LESSONS_TABLE: !Ref Lessons



#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
# resources:
#  Resources:
#    Students:
#      Type: AWS::DynamoDB::Table
#      Properties:
#        TableName: Students
#        AttributeDefinitions:
#          - AttributeName: student_id
#            AttributeType: S
#        KeySchema:
#          - AttributeName: student_id
#            KeyType: HASH
#        BillingMode: PAY_PER_REQUEST

resources:
    Resources:
        Students:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: Students
                AttributeDefinitions:
                    - AttributeName: student_id
                      AttributeType: S
                KeySchema:
                    - AttributeName: student_id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        Books:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: Books
                AttributeDefinitions:
                    - AttributeName: book_id
                      AttributeType: S
                    - AttributeName: title
                      AttributeType: S
                KeySchema:
                    - AttributeName: book_id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST

        Groups:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: Groups
                AttributeDefinitions:
                    - AttributeName: group_id
                      AttributeType: S
                    - AttributeName: name
                      AttributeType: S
                KeySchema:
                    - AttributeName: group_id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
        Lessons:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: Lessons
                AttributeDefinitions:
                    - AttributeName: lesson_id
                      AttributeType: S
                KeySchema:
                    - AttributeName: lesson_id
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST





#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
